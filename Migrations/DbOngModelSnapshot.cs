// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ong.Data;

#nullable disable

namespace Ong.Migrations
{
    [DbContext(typeof(DbOng))]
    partial class DbOngModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ong.Models.Contato", b =>
                {
                    b.Property<int>("ContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContatoId"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContatoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("Ong.Models.Doacao", b =>
                {
                    b.Property<int>("DoacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoacaoId"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoadorId")
                        .HasColumnType("int");

                    b.Property<int>("OngId")
                        .HasColumnType("int");

                    b.HasKey("DoacaoId");

                    b.HasIndex("DoadorId");

                    b.HasIndex("OngId");

                    b.ToTable("Doacao");
                });

            modelBuilder.Entity("Ong.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventoId"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OngId")
                        .HasColumnType("int");

                    b.HasKey("EventoId");

                    b.HasIndex("OngId");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("Ong.Models.PedidoDoacao", b =>
                {
                    b.Property<int>("PedidoDoacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PedidoDoacaoId"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OngId")
                        .HasColumnType("int");

                    b.HasKey("PedidoDoacaoId");

                    b.HasIndex("OngId");

                    b.ToTable("PedidoDoacao");
                });

            modelBuilder.Entity("Ong.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Ong.Models.VoluntarioEvento", b =>
                {
                    b.Property<int>("VoluntarioId")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoluntarioId", "EventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("VoluntarioEvento");
                });

            modelBuilder.Entity("Ong.Models.Doador", b =>
                {
                    b.HasBaseType("Ong.Models.Usuario");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.ToTable("Doador", (string)null);
                });

            modelBuilder.Entity("Ong.Models.Ong", b =>
                {
                    b.HasBaseType("Ong.Models.Usuario");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFundacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Ong", (string)null);
                });

            modelBuilder.Entity("Ong.Models.Voluntario", b =>
                {
                    b.HasBaseType("Ong.Models.Usuario");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Voluntario", (string)null);
                });

            modelBuilder.Entity("Ong.Models.Contato", b =>
                {
                    b.HasOne("Ong.Models.Usuario", "Usuario")
                        .WithMany("Contatos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ong.Models.Doacao", b =>
                {
                    b.HasOne("Ong.Models.Doador", "Doador")
                        .WithMany("Doacoes")
                        .HasForeignKey("DoadorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ong.Models.Ong", "Ong")
                        .WithMany()
                        .HasForeignKey("OngId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doador");

                    b.Navigation("Ong");
                });

            modelBuilder.Entity("Ong.Models.Evento", b =>
                {
                    b.HasOne("Ong.Models.Ong", "Ong")
                        .WithMany("Eventos")
                        .HasForeignKey("OngId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ong");
                });

            modelBuilder.Entity("Ong.Models.PedidoDoacao", b =>
                {
                    b.HasOne("Ong.Models.Ong", "Ong")
                        .WithMany("PedidoDoacoes")
                        .HasForeignKey("OngId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ong");
                });

            modelBuilder.Entity("Ong.Models.VoluntarioEvento", b =>
                {
                    b.HasOne("Ong.Models.Evento", "Evento")
                        .WithMany("VoluntarioEventos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ong.Models.Voluntario", "Voluntario")
                        .WithMany("VoluntarioEventos")
                        .HasForeignKey("VoluntarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Voluntario");
                });

            modelBuilder.Entity("Ong.Models.Doador", b =>
                {
                    b.HasOne("Ong.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Ong.Models.Doador", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ong.Models.Ong", b =>
                {
                    b.HasOne("Ong.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Ong.Models.Ong", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ong.Models.Voluntario", b =>
                {
                    b.HasOne("Ong.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("Ong.Models.Voluntario", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ong.Models.Evento", b =>
                {
                    b.Navigation("VoluntarioEventos");
                });

            modelBuilder.Entity("Ong.Models.Usuario", b =>
                {
                    b.Navigation("Contatos");
                });

            modelBuilder.Entity("Ong.Models.Doador", b =>
                {
                    b.Navigation("Doacoes");
                });

            modelBuilder.Entity("Ong.Models.Ong", b =>
                {
                    b.Navigation("Eventos");

                    b.Navigation("PedidoDoacoes");
                });

            modelBuilder.Entity("Ong.Models.Voluntario", b =>
                {
                    b.Navigation("VoluntarioEventos");
                });
#pragma warning restore 612, 618
        }
    }
}
